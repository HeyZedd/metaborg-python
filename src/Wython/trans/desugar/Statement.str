module Statement

imports
  src-gen/signatures/-
  ast-syntax/-

  trans/desugar/Expression
  
rules
  desugar-suite: Statement(stmt) -> <desugar-stmt> stmt
  desugar-suite: BlockLine(stmts, _) -> <mapconcat(desugar-stmt)> stmts
  
  desugar-stmt: SimpleStatement(stmts, _) -> <map(desugar-stmt)> stmts
  desugar-stmt: Expression(exp) -> ExprStmt(<desugar-expr> exp)
  
  desugar-stmt: For(For(trgt, iter, _, body, else)) -> [For(<desugar-for> trgt, <desugar-expr> iter, <desugar-suite> body, <desugar-if> else)]
  desugar-stmt: While(cond, _, body, else) -> [While(<desugar-expr> cond, <desugar-suite> body, <desugar-if> else)]
  desugar-stmt: If(cond, _, body, elif, else) -> [If(<desugar-expr> cond, <desugar-suite> body, des-else)]
    where
      des-else := <foldr(!<desugar-if> else, desugar-if)> elif

  desugar-if: None() -> None()
  desugar-if: Some(item) -> <desugar-if> item
  desugar-if: Else(_, suite) -> <desugar-suite> suite
  
  desugar-if: (Elif(cond, _, body), else) -> If(<desugar-expr> cond, <desugar-suite> body, else)
  desugar-for: [elem] -> <desugar-expr> elem
  desugar-for: List(list, _) -> Tuple(<map(desugar-expr)> list, Store())
  desugar-for: e -> <debug> e
  
  desugar-stmt: Pass() -> Pass()
  
  desugar-stmt: e -> [<debug> ("Cannot desugar statement: ", e)]