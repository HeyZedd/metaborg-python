module Expression

imports
  signatures/Expression-sig
  signatures/CompoundStatement-sig
  signatures/Test-sig
  signatures/Common-sig
  
  ast-syntax/AST-Expression
  ast-syntax/AST-Common

rules  
  desugar-expr: Exp([item]) -> <desugar-expr> item
  desugar-expr: Exp([h | t]) -> <foldl(desugar-binop-or)> (t, <desugar-expr> h)
  desugar-expr: Exp(exp) -> <desugar-expr> exp
  desugar-binop-or: (r, l) -> BinOp(BitOr(), l, <desugar-expr> r)
  
  desugar-expr: XorExp([item]) -> <desugar-expr> item
  desugar-expr: XorExp([h | t]) -> <foldl(desugar-binop-xor)> (t, <desugar-expr> h)
  desugar-binop-xor: (r, l) -> BinOp(BitXor(), l, <desugar-expr> r)
  
  desugar-expr: AndExp([item]) -> <desugar-expr> item
  desugar-expr: AndExp([h | t]) -> <foldl(desugar-binop-and)> (t, <desugar-expr> h)
  desugar-binop-and: (r, l) -> BinOp(BitAnd(), l, <desugar-expr> r)
  
  desugar-expr: ShiftExp(h, []) -> <desugar-expr> h
  desugar-expr: ShiftExp(l, r) ->  ShiftExp(l, r) where e := <debug> "[Desugar] Unsupported operation: Shift"
  
  desugar-expr: ArithExp(h, []) -> <desugar-expr> h
  desugar-expr: ArithExp(h, t) -> <foldl(desugar-arith)> (t, <desugar-expr> h)
  
  desugar-arith: (Add(r), l) -> BinOp(Add(), l, <desugar-expr> r)
  desugar-arith: (Sub(r), l) -> BinOp(Sub(), l, <desugar-expr> r)
  desugar-arith: (Div(r), l) -> BinOp(Div(), l, <desugar-expr> r)
  desugar-arith: (Mul(r), l) -> BinOp(Mult(), l, <desugar-expr> r)
  desugar-arith: (IntDiv(r), l) -> BinOp(FloorDiv(), l, <desugar-expr> r)
  desugar-arith: (PowerNode(r), l) -> BinOp(Pow(), l, <desugar-expr> r)
  desugar-arith: (op, l) -> <debug> ("[Desugar] Unsupported operation: ", op)

  
  desugar-expr: Term(h, []) -> <desugar-expr> h
  desugar-expr: Term(l, r) -> <foldl(desugar-arith)> (r, <desugar-expr> l)

  desugar-expr: Power(exp) -> <desugar-expr> exp
  
  desugar-expr: Power(atom, None()) -> <desugar-expr> atom
  desugar-expr: Power(atom, exponent) -> BinOp(Pow(), <desugar-expr> atom, <desugar-expr> exponent)
  
  desugar-expr: AtomExp(Await(_), a, b) -> Await(<desugar-expr> AtomExp(None(), a, b))
  desugar-expr: AtomExp(None(), atom, []) -> atom
  desugar-expr: AtomExp(None(), atom, [h | t]) -> <desugar-atom> ([atom], h, t)
  
  desugar-atom: (obj, DotName(name), [h | t]) -> <desugar-atom> (<concat>[obj, [ID(name)]], h, t)
  desugar-atom: (obj, ArgList(list), []) -> Call(<desugar-call> obj, args, kargs)
    where
      (args, kargs) := <desugar-args> list

  desugar-atom: (obj, ArgList(list), [h|t]) -> <desugar-atom> ([Call(<desugar-call> obj, args, kargs)], h, t)
    where
      (args, kargs) := <desugar-args> list

//  desugar-atom: (obj, SubscriptList(list), [h | t]) -> a


  
  desugar-call: [ID(name)] -> Name(ID(name), Load())
  desugar-call: [e] -> e
  desugar-call: [h | t] -> Attribute(<desugar-call> t, h, Load())
  
  desugar-args: Some(list) -> <desugar-args> list
  desugar-args: None() -> ([], [])
  
  desugar-args: ArgList(list, _) -> <desugar-args> (list, [], [])
  desugar-args: ([], arg, karg) -> (arg, karg)
  desugar-args: ([h | t], arg, karg) -> <desugar-args> (t, <concat> [arg, n_arg], <concat> [karg, n_karg])
    where
      (n_arg, n_karg) := <desugar-args> h
  
  desugar-args: CompForArgument(t, None()) -> ([<desugar-expr> t], [])
  
  desugar-expr: Test(or, None()) -> <desugar-expr> or
  desugar-expr: Test(l, r) -> Compare(Eq(), <desugar-expr> l, <desugar-expr> r)
  
  desugar-expr: TestList([elem], _) -> <desugar-expr> elem
  desugar-expr: TestList(list, _) -> Tuple(<map(desugar-expr)> list, Load())
  
  desugar-expr: OrTest([and]) -> <desugar-expr> and
  desugar-expr: OrTest(list) -> BoolOp(Or(), <map(desugar-expr)> list)
  
  desugar-expr: AndTest([comp]) -> <desugar-expr> comp
  desugar-expr: AndTest(list) -> BoolOp(And(), <map(desugar-expr)> list)
  
  desugar-expr: Comparison(exp, []) -> <desugar-expr> exp
  desugar-expr: Comparison(lhs, cmps) -> Compare(<desugar-expr>lhs, ops, exprs)
    where
      (ops, exprs) := <unzip><map(desugar-comp)> cmps
      
  desugar-comp: Comparison(Eq(),    exp) -> (Eq(),    <desugar-expr> exp)
  desugar-comp: Comparison(Lt(),    exp) -> (Lt(),    <desugar-expr> exp)
  desugar-comp: Comparison(Gt(),    exp) -> (Gt(),    <desugar-expr> exp)
  desugar-comp: Comparison(Geq(),   exp) -> (GtE(),   <desugar-expr> exp)
  desugar-comp: Comparison(Leq(),   exp) -> (LtE(),   <desugar-expr> exp)
  desugar-comp: Comparison(Neq(),   exp) -> (Neq(),   <desugar-expr> exp)
  desugar-comp: Comparison(In(),    exp) -> (In(),    <desugar-expr> exp)
  desugar-comp: Comparison(NotIn(), exp) -> (NotIn(), <desugar-expr> exp)
  desugar-comp: Comparison(Is(),    exp) -> (Is(),    <desugar-expr> exp)
  desugar-comp: Comparison(IsNot(), exp) -> (IsNot(), <desugar-expr> exp)
  
  desugar-expr: e -> <debug> ("Cannot desugar expression: ", e)
