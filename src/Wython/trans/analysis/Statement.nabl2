module analysis/Statement

imports
  desugar/-
  analysis/-

rules  
  
  Stmt[[ [] ^(s)]].	// Empty else and stuff
  Stmt[[ Pass() ^(s)]].
    
  Stmt[[ExprStmt(exp) ^(s)]] :=
    Expr[[exp ^(s): ty]],
    ty != NoneT() | note $[Result of calculation is not stored] @exp.
    
  Args[[Arg(ID(name), type) ^(s) : ty]] :=
  	Var{name} <- s,
  	Type[[type: ty]],
  	Var{name}: ty!.
 
  Type[[None(): UnitT()]].
  Type[[IntT(): IntT()]].
  Type[[StringT(): StringT()]].
  Type[[NoneT(): NoneT()]].
  Type[[BoolT(): BoolT()]].
  	
  Stmt[[Return(val) ^(s)]] :=
  	Expr[[val ^(s): ty]],
  	Var{"_$_return"} -> s,
  	Var{"_$_return"} |-> d,
  	d: expty,
  	ty <? expty | error $[Invalid return type. Found [ty], expected [expty]] @val.
  	
  ExistsT[[id ^(s) : ty ]] :=
  	Var{id} -> s, // This should not be needed
  	Var{id} |-> d | note $[First declariation of variable [id]] @id,
    d : ty_old,
    ty_old == ty | warning $[You are assigning a value of type [ty] to a variable containing type [ty_old]] @id.