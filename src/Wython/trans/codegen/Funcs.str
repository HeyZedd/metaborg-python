module Funcs

imports
  signatures/WebAssembly/-
  ast-syntax/-
  trans/codegen/-

rules

  funcs:
    exprList -> [ WastFunc(
          Some("$main"), 
		  body) ]
 	 where 
    lengths := <map(calculate-length)> exprList;
    offsets := <calculate-offset> lengths;
    body := <concat> <map(exprStmt)> <zip> (exprList, offsets);
    <debug> ("Funcs, body:", body)
          
   exprStmt:
   	 (ExprStmt(Call(name, params, kwargs)), offsets) -> exprList
   	    where
   	      parameters := <concat> <map(param)> <zip> (params, offsets);
   	      <debug> parameters;
   	      call := <callExpr> name;
   	      <debug> call;
		  exprList:= <concat> [
			 parameters,
			 call
		  ] 
		  
   exprStmt: 
     (If(expr, body, else), [bodyOffsets, elseOffsets]) -> code
     where
      code := <concat> [
        <evaluate> expr,
        [WastIf(
          WastThen(<concat> <map(exprStmt)> <zip> (body, bodyOffsets)),
          Some(WastElse(<concat> <map(exprStmt)> <zip> (else, elseOffsets)))
        )]
      ];
      <debug> code


	evaluate:
		False() -> [ WastExpr(WastInstr(I32Const("0"))) ]

	evaluate:
		True() -> [ WastExpr(WastInstr(I32Const("1"))) ]
   	   
   callExpr: 
	   Name(identifier, Load()) -> 
	   	  [ WastExpr(WastCall(WastCall(name))) ]
	   where 
	   name := <varName> identifier
	   
   varName:
   	ID(name) -> <conc-strings> ("$", name)

   param: 
      (String(s), [offset]) -> [
	    WastExpr(WastInstr(I32Const(offset))),
      WastExpr(WastInstr(I32Const(len)))
      ]
      where
      len := <int-to-string> <string-length> s