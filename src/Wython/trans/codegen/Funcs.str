module Funcs

imports
  signatures/WebAssembly/-
  ast-syntax/-
  trans/codegen/-

rules

  funcs:
    (FunctionDef(
      name,
      Arguments(args,_,_,_,_,_), 
      body, 
      decorators, 
      return
     ), [offsets]) -> [ 
        WastFunc(
          Some(<concat-strings>("$", name)),
          params,
          wastBody
      )]
 	 where 
    <debug> ("FunctionDef, offsets:", offsets);
    wastBody := <concat> <map(exprStmt)> <zip> (body, offsets);
    params := <concat> <map(paramDef)> args
          
  funcs:
    (exprList, [offsets]) -> [ WastFunc(
          Some("$main"),
          [],
		  body) ]
 	 where 
    <debug> ("exprList, offsets:", offsets);
    body := <concat> <map(exprStmt)> <zip> (exprList, offsets)
          
   exprStmt:
   	 (ExprStmt(Call(name, params, kwargs)), offsets) -> call
   	    where
          <debug> ("exprStmt, offsets:", offsets);
          <debug> ("exprStmt, params:", params);
          <debug> ("exprStmt, zipped:", <zip> (params, offsets));
   	      parameters := <concat> <map(param)> <zip> (params, offsets);
   	      <debug> parameters;
   	      call := <callExpr> (name, parameters)
		  
  exprStmt: 
    (If(expr, body, else), [bodyOffsets, elseOffsets]) -> 
       <concat> [ 
          <evaluate> expr,
          [WastIf(
            WastThen(<concat> <map(exprStmt)> <zip> (body, bodyOffsets)),
            Some(WastElse(<concat> <map(exprStmt)> <zip> (else, elseOffsets)))
          )]
        ]

  paramDef:
    Arg(name, _) ->
     WastParam(<concat-strings>("$", name), WastI32())

	evaluate:
		False() -> [ WastI32Const("0") ]

	evaluate:
		True() -> [ WastI32Const("1") ]
   	   
   callExpr: 
	   (Name(identifier, Load()), params) -> 
	   	  [ WastCall(name, params) ]
	   where 
	   name := <varName> identifier
	   
   varName:
   	ID(name) -> <conc-strings> ("$", name)

   param: 
      (p, offset) -> [
        WastI32Const(offset),
        WastI32Const(len)
      ]
      where
      <debug> ("param, offset:", offset);
      [len] := <calculate-length> p