module Funcs

imports
  signatures/WebAssembly/-
  ast-syntax/-
  trans/codegen/-

rules

  funcs:
    (FunctionDef(name, args, body, decorators, return), offsets) -> [ WastFunc(
          Some(<concat-strings>("$", name)),
          params,
		  wastBody) ]
 	 where 
    wastBody := <concat> <map(exprStmt)> <zip> (body, offsets);
    params := <concat> <map(paramDef)> args;
    <debug> ("Funcs, body:", body)
          
  funcs:
    exprList -> [ WastFunc(
          Some("$main"),
          [],
		  body) ]
 	 where 
    lengths := <map(calculate-length)> exprList;
    offsets := <calculate-offset> lengths;
    body := <concat> <map(exprStmt)> <zip> (exprList, offsets);
    <debug> ("Funcs, body:", body)
          
   exprStmt:
   	 (ExprStmt(Call(name, params, kwargs)), offsets) -> call
   	    where
   	      parameters := <concat> <map(param)> <zip> (params, offsets);
   	      <debug> parameters;
   	      call := <callExpr> (name, parameters)
		  
  exprStmt: 
    (If(expr, body, else), [bodyOffsets, elseOffsets]) -> 
       <concat> [ 
          <evaluate> expr,
          [WastIf(
            WastThen(<concat> <map(exprStmt)> <zip> (body, bodyOffsets)),
            Some(WastElse(<concat> <map(exprStmt)> <zip> (else, elseOffsets)))
          )]
        ]

  paramDef:
    Arg(name, _) ->
     WastParam(<concat-strings>("$", name), WastI32())

	evaluate:
		False() -> [ WastI32Const("0") ]

	evaluate:
		True() -> [ WastI32Const("1") ]
   	   
   callExpr: 
	   (Name(identifier, Load()), params) -> 
	   	  [ WastCall(name, params) ]
	   where 
	   name := <varName> identifier
	   
   varName:
   	ID(name) -> <conc-strings> ("$", name)

   param: 
      (p, [offset]) -> [
        WastI32Const(offset),
        WastI32Const(len)
      ]
      where
      [len] := <calculate-length> p