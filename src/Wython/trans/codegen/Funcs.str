module Funcs

imports
  signatures/WebAssembly/-
  ast-syntax/-
  trans/codegen/-

rules

  funcs:
    (funcList, offsets) -> <concat> [funcs, main]
    where
    funcs := <concat> <map(funcDef)> <filter(is-func)> <zip> (funcList, offsets);
    main := <mainDef> <filter(not(?is-func))> <zip> (funcList, offsets)

  funcs:
    error -> []
 	 where 
    <debug> ("funcs, failed:", error)
          
  is-func: (FunctionDef(a,b,c,d,e), o) -> 
    (FunctionDef(a,b,c,d,e), o)

  funcDef:
    (FunctionDef(
      name,
      Arguments(args,_,_,_,_,_), 
      body, 
      decorators, 
      return
     ), offsets) -> [ 
        WastFunc(
          Some(<concat-strings>["$", name]),
          params,
          wastBody
      )]
 	 where 
    wastBody := <concat> <map(exprStmt)> <debug> <zip> (body, offsets);
    params := <concat> <map(paramDef)> args

  funcDef:
    error -> []
 	 where 
    <debug> ("funcDef, failed:", error)
          
  mainDef:
    exprList -> [ WastFunc(
          Some("$main"),
          [],
        body
		  ) ]
 	 where 
    <debug> ("mainDef, exprList:", exprList);
    body := <debug> <concat> <debug> <map(exprStmt)> exprList
    
  exprStmt:
   	 (ExprStmt(Call(name, params, kwargs)), offsets) -> call
   	    where
   	      parameters := <concat> <map(param)> <zip> (params, offsets);
   	      call := <callExpr> (name, parameters)
		  
  exprStmt: 
    (If(expr, body, else), [bodyOffsets, elseOffsets]) -> 
       <concat> [ 
          <evaluate> expr,
          [WastIf(
            WastThen(<concat> <map(exprStmt)> <zip> (body, bodyOffsets)),
            Some(WastElse(<concat> <map(exprStmt)> <zip> (else, elseOffsets)))
          )]
        ]

  exprStmt: 
    (If(expr, body, []), [bodyOffsets]) -> 
       <concat> [ 
          <evaluate> expr,
          [WastIf(
            WastThen(<concat> <map(exprStmt)> <zip> (body, bodyOffsets)),
            None()
          )]
        ]

  exprStmt:
    error -> []
 	 where 
    <debug> ("exprStmt, failed:", error)

  paramDef:
    Arg(name, _) ->
     WastParam(<concat-strings>["$", name], WastI32())

  paramDef:
    error -> []
 	 where 
    <debug> ("paramDef, failed:", error)
          
	evaluate:
		False() -> [ WastI32Const("0") ]

	evaluate:
		True() -> [ WastI32Const("1") ]

  evaluate:
    error -> []
 	 where 
    <debug> ("param, failed:", error)
   	   
   callExpr: 
	   (Name(identifier, Load()), params) -> 
	   	  [ WastCall(name, params) ]
	   where 
	   name := <varName> identifier
	   
   varName:
   	ID(name) -> <conc-strings> ("$", name)

   param: 
      (p, [offset]) -> [
        WastI32Const(offset),
        WastI32Const(len)
      ]
      where
      //<debug> ("param, offset:", offset);
      [len] := <calculate-length> p

   param:
     error -> []
     where 
     <debug> ("param, failed:", error)
          