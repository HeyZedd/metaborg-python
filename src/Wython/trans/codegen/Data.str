module Data

imports
  signatures/WebAssembly/-
  ast-syntax/-
  trans/codegen/-
  
rules

  data:
    callList -> dataList
    where 
    dataList := <concat> <map(importCall)> callList
    
  importCall:
  	If(condition, body, else) -> dataList
  	where
  	dataList := <concat> [
  		<concat> <map(importCall)> body,
  		<concat> <map(importCall)> else
  	]
      
  importCall:
    ExprStmt(Call(name, args, kwargs)) -> dataList
    where
      <debug> args;
      dataList := <concat> <map(dataStmt)> args

  dataStmt:
    (param) -> [
       WastData(
          WastExpr(WastInstr(I32Const("0"))), 
          Some(val)
        )]
      where
        <debug> param;
        val := <to-string> param;
        <debug> val
       
  to-string:
    Int(val) -> string
      where
      //string := val
      <debug> val;
      string := <int-to-string> val
      //<debug> string

  to-string:
    Num(val) -> string
      where
      <debug> val;
      string := <real-to-string> val
    
  to-string:
    String(val) -> val
