module Statements

imports
  signatures/WebAssembly/-
  trans/codegen/-
  ast-syntax/-


rules
  codegen-stmt: (Assign(name, value), (w-stmts, mem)) -> (<concat> [w-stmts, w-stmt], mem2)
    where
      (w-value, mem1) := <codegen-expr> (value, mem);
      w-name := <codegen-name> name;
      (w-vardecl, mem2) := <mem-add-var> (mem1, (w-name, WastI32()));
      w-stmt := <concat> [w-vardecl, [WastSetLocal(w-name, w-value)]]
      
  codegen-stmt: (While(cond, body, else), (w-stmts, mem)) -> (<concat> [w-stmts, [w-stmt]], mem3)
    where
      (w-cond, mem1) := <codegen-expr> (cond, mem);
      (w-body, mem2) := <foldl(codegen-stmt)> (body, ([], mem1));
      (w-else, mem3) := <foldl(codegen-stmt)> (else, ([], mem2));
      //TODO: add else case
      w-stmt := WastBlock(WastLoop(<concat> [w-body, [WastBrIf("0", w-cond)], [WastBr("1")]]))
      
  codegen-stmt: (ExprStmt(expr), (w-stmts, mem)) -> (<concat> [w-stmts, [w-stmt]], mem')
    where
      (w-stmt, mem') := <codegen-expr> (expr, mem)
  
  codegen-stmt: (stmt, (w-stmts, mem)) -> (<concat> [w-stmts, [stmt]], mem) where <debug> ("codegen-stmt failed:", stmt)
  