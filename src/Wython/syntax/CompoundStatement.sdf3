module CompoundStatement

imports
  
  Common
  ID
  Expression
  Program
  Statement
  SimpleStatement
  Parameters
  Test
  Class

context-free start-symbols

  CompoundStatement

context-free syntax

    CompoundStatement.If = "if" Test ":" NewLine body:Suite                     { layout (indent "if" body) }
    CompoundStatement.IfElse = "if" Test ":" NewLine body:Suite else:ElifElse   { layout (indent "if" body && align "if" else) }
    
    CompoundStatement.While = "while" Test ":" NewLine body:Suite                 { layout (indent "while" body) }
    CompoundStatement.WhileElse = "while" Test ":" NewLine body:Suite else:Else   { layout (indent "while" body && align "while" else) }
    CompoundStatement.For = For
    CompoundStatement.Try = "try" ":" Suite Except+ Else? Finally?
    CompoundStatement.TryFinally = "try" ":" Suite Finally
    CompoundStatement.With = With
    CompoundStatement.FuncDef =  FuncDef
    CompoundStatement.ClassDef = "class" ID ArgList? ":" Suite
    CompoundStatement.Decorated = Decorators Definition
    CompoundStatement.AsyncFunc = Async FuncDef
    CompoundStatement.AsyncWith = Async With
    CompoundStatement.AsyncFor = Async For
    
    ElifElse = Else
    ElifElse = Elif
    
    With.With = "with" { WithItem ","}+ ":" Suite

    For.For = "for" ExpList "in" TestList ":" NewLine body:Suite                 { layout (indent "for" body) }
    For.ForElse = "for" ExpList "in" TestList ":" NewLine body:Suite else:Else   { layout (indent "for" body && align "for" else) }
    
    Finally.Finally = "finally" ":" Suite

// TODO Default Except Clause
    Except.Except = ExceptClause ":" Suite
    
    ExceptClause.ExceptClause = "except" ExceptArgument?

    ExceptArgument.ExceptArgument = Test AsName?

    Decorators.Decorators = Decorator+
    
    Decorator.Decorator = "@" DottedName ArgListInBraces? NewLine

    ArgListInBraces.ArgListInBraces = "(" ArgList? ")"

    Definition.ClassDef = ClassDef
    Definition.FuncDef = FuncDef
    Definition.AsyncFuncDef = AsyncFuncDef
    
    AsyncFuncDef.AsyncFuncDef = Async FuncDef
    
    FuncDef.FuncDef = "def" ID Parameters FuncType? ":" Suite
    
    SubscriptList.SubscriptList = {Subscript ","}+ Comma?
    
    Subscript.Test = Test
    Subscript.Slice = Test? ":" Test? SliceOp?
    
    SliceOp.SliceOp = ":" Test?
    
    ArgList.ArgList = {Argument ","}+  Comma? 

    Argument.CompForArgument = Test CompFor?
    Argument.Assignment = Test "=" Test
    Argument.Kwargs = "**" Test
    Argument.Args = "*" Test

    CompFor.CompFor = Async? "for" ExpList "in" OrTest CompIter?
    
    CompIf.CompIf = "if" TestNocond CompIter?

    CompIter.CompFor = CompFor

    WithItem.Item = Test WithItemAs?
    WithItemAs.As = "as" Exp

    Elif.Elif = "elif" Test ":" NewLine body:Suite                   { layout (indent "elif" body) }
    Elif.ElifElse = "elif" Test ":" NewLine body:Suite else:ElifElse { layout (indent "elif" body && align "elif" else) }
    
    Else.Else = "else" ":" NewLine body:Suite { layout (indent "else" body) }
    
    FuncType.FuncType = "->" Test

    Suite.Statement = SimpleStatement   {prefer}
    Suite.BlockLine = {Statement "\n"}+ NewLineEOF { layout (align 1) }
