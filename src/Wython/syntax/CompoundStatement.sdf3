module CompoundStatement

imports
  
  Common
  ID
  Expression
  Statement
  Parameters

context-free start-symbols

  CompoundStatement

context-free syntax

    CompoundStatement.If = "if" Exp ":" body:Suite                       { layout (indent "if" body) }
    CompoundStatement.IfElse = "if" Exp ":" body:Suite else:ElifElse     { layout (indent "if" body && align "if" else) }
    
    CompoundStatement.While = "while" Exp ":" body:Suite                 { layout (indent "while" body) }
    CompoundStatement.WhileElse = "while" Exp ":" body:Suite else:Else   { layout (indent "while" body && align "while" else) }

    CompoundStatement.For = For
    CompoundStatement.Try = "try:" body:Suite				   	  { layout (indent "try:" body) }
    CompoundStatement.TryElse = "try:" body:Suite else:TryElse 	  { layout (indent "try:" body && align "try:" else) }
    
    TryElse.Except = ExceptClause ":" body:Suite 				  { layout (indent 1 body) }
    TryElse.ExceptElse = ExceptClause ":" body:Suite else:TryElse { layout (indent 1 body && align 1 else) }
    TryElse.Finally = "finally:" body:Suite 					  { layout (indent "finally:" body) }
    
    CompoundStatement.With = With
    CompoundStatement.FuncDef =  FuncDef
    CompoundStatement.ClassDef = "class" ID Arguments ":" body:Suite  { layout (indent "class" body) }
    FuncDef.FuncDef = "def" ID Arguments FuncType? ":" body:Suite    { layout (indent "def" body) }
    
    CompoundStatement.AsyncFunc = Async FuncDef
    CompoundStatement.AsyncWith = Async With
    CompoundStatement.AsyncFor = Async For

    ElifElse = Else
    ElifElse = Elif
    
    With.With = "with" { WithItem ","}+ ":" body:Suite	{ layout (indent "with" body) }

    For.For = "for" ExpList "in" ExpList ":" body:Suite                 { layout (indent "for" body) }
    For.ForElse = "for" ExpList "in" ExpList ":" body:Suite else:Else   { layout (indent "for" body && align "for" else) }
  
    ExceptClause.ExceptClause = "except" ExceptArgument?
    ExceptArgument.ExceptArgument = Exp AsName?

    WithItem.Item = Exp WithItemAs?
    WithItemAs.As = "as" ID

    Elif.Elif = "elif" Exp ":" body:Suite                   { layout (indent "elif" body) }
    Elif.ElifElse = "elif" Exp ":" body:Suite else:ElifElse { layout (indent "elif" body && align "elif" else) }
    
    Else.Else = "else:" body:Suite { layout (indent "else:" body) }
    
    FuncType.FuncType = "->" Exp
